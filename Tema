Introducere
O operație este alcătuită din operanzi și operator. Operanzii reprezintă datele cu care se fac operațiile, iar operatorul este simbolul care stabilește ce operație se face cu operanzii. Din punct de vedere a numărului de operanzi, operațiile (operatorii) pot fi:

unare – se aplică la un singur operand (de exemplu -7, operația de schimbare a semnului unui număr);
binare – se aplică la doi operanzi (de exemplu adunarea numerelor, 2+5);
ternare – se aplică la trei operanzi. Există un singur operator ternar în C++, operatorul condițional și va fi analizat mai jos.
Operanzii pot fi variabile, constante, literali, rezultatele unor funcții, rezultatele altor operații. O operație care are ca operanzi alte operații se numește expresie.

Fiecare operație C++ are un rezultat!



Acest articol analizează o parte a operatorilor C++, cei mai frecvent utilizați:

Operatorii aritmetici
Aceștia sunt: +, -, *, /, %. În exemplele de mai jos, considerăm variabilele:

N = 11 și M = 3 de tip int
X = 11 și Y = -3.5 de tip double.
Operatorii aritmetici unari
În C++ există operațiile unare + și -:
+ returnează valoarea operandului
- returnează valoarea operandului cu semn schimbat.
Exemple

+ X = 11
- Y = 3.5
- + N = -11
Operatorii aritmetici binari
+ : adunarea a două numere;
- : scăderea a două numere;
* : înmulțirea a două numere;
/ : împărțirea a două numere;
% : restul împărțirii a două numere întregi (modulo);
În C++ nu există un operator pentru ridicarea la putere!
Adunarea, scăderea și înmulțirea se comportă conform așteptărilor, ca la matematică. Operația de împărțire și operația modulo necesită niște explicații suplimentare.

Împărțirea întreagă și împărțirea zecimală

Operația de împărțire are două moduri de lucru, în funcție de tipul operanzilor.

Dacă operanzii sunt de tip întreg (int, short, char, etc.), se va realiza împărțirea întreagă, iar rezultatul operației / este câtul împărțirii întregi.
Dacă operanzii sunt de tip real (float, double, long double), se va realiza împărțirea zecimală, iar rezultatul operației / este rezultatul acestei împărțiri, “cu virgulă”.
Exemple

N / M = 3
X / Y = -3.14286
X / 2.0 = 5.5
M / 2 = 1
M / 2.0 = 1.5
Ultima împărțire este deosebită. Cei doi operanzi au tipuri diferite: M = 3 este de tip int, iar 2.0 este de tip double. Aici intervine operația de conversie implicită: în mod automat, valoarea operandului M se consideră ca fiind de tip double, împărțirea este împărțire reală și are rezultatul 1.5.

Operatorul modulo %

Operația modulo are sens numai dacă ambii operanzi sunt de tip întreg – împărțirea cu rest are sens numai în această situație. Iată câteva exemple:

N % M = 2 : restul împărțirii lui 11 la 3 este 2
30 % 10 = 0
Operatorul modulo este util în multe situații. El poate fi utilizat pentru a afla ultima cifră a unui număr natural: ultima cifră a lui 276 este 276 % 10 adică 6, sau pentru a verifica dacă un număr N este divizor al lui M. În caz afirmativ, M % N este 0.

Observații suplimentare

nu se poate face împărțire la 0.
dacă cel puțin un operand al împărțirii întregi sau al operației modulo este negativ, rezultatul operației depinde de versiunea compilatorului C++ folosit. O variantă de evaluare, utilizată în unele compilatoare, este efectuarea operației cu operanzii în valoare absolută și apoi aplicarea regulii semnelor.
Exerciții
Ex. 1
Ex. 2
Ex. 3
Ex. 4
Ex. 5
Ex. 6
Ex. 7
Ex. 8

Care este rezultatul evaluării expresiei C/C++ următoare: 11*3/2*2/3?

Varianta 1
2

Varianta 2
10

Varianta 3
2.75

Varianta 4
11


Operatorii relaționali
Sunt: <, >, <=, >=, ==, != .

Un operatori relațional stabilește dacă între două numere (operanzii) are loc o anumită relație. Rezultatul acestei operații este adevărat sau fals. Rezultatul operațiilor relaționale poate fi 0 sau 1:

rezultatul este 1 dacă relația este adevărată
rezultatul este 0 dacă relația este falsă
Fie N = 11 și M = 3. Operațiile relaționale sunt:

operații de comparare (comparații)
mai mic <; N < M este fals, adică 0
mai mare >; N > M este adevărat, adică 1
mai mic sau egal <=; M <= N este 1
mai mare sau egal >=; M >= N este 0
operația de egalitate == ; N == M este fals, adică 0
operația de neegalitate (diferit, not egal) !=; N != M este adevărat, adică 1.
Una dintre cele mai frecvente erori este folosirea pentru operația de egalitate a operatorului =, în loc de ==. Operatorul = reprezintă operația de atribuire!

O altă eroare frecventă apare la compararea mai multor numere. De la matematică suntem obișnuiți să comparăm numere astfel: a < b < c – condiția este adevărată dacă numerele sunt în ordine strict crescătoare. În C++, rezultatul acestei operații poate fi diferit de cel așteptat, datorită modului în care se fac operațiile.

De exemplu:

cout << (5 > 4 > 3) ; // 0 (false)
Expresia 5 > 4 > 3 este echivalentă cu (5 > 4) > 3 și se evaluază astfel:

mai întâi se efectuează operația 5 > 4, cu rezultat adevărat (1)
apoi se efectuează 1 > 3, cu rezultat fals (0)!!


Operatorii logici
Sunt: !, ||, &&.

Operatorii logici au operanzi de tip valori de adevăr și rezultat valori de adevăr. Istoric, operațiile logice sunt legate de numele matematicianului englez George Boole, cel care a pus bazele acestei ramuri a matematicii și a inventat algebra booleană și calculul propozițional.

În C++, operatorii logici pot fi aplicați oricăror valori numerice, și au ca rezultat una din valorile 0 sau 1. În exemplele de mai jos vom folosi literalii true și false, de tip bool.

Negația: !

! true este false. Orice valoare nenulă negată devine 0.
! false este true. 0 negat devine 1.
Disjuncția: ||

false || false → false
false || true → true
true || false → true
true || true → true
Conjuncția: &&

false && false → false
false && true → false
true && false → false
true && true → true
